Funtions:


def name_of_function(first_name):
 """
 Simple test function
 """
 print(f"Yoo hoo, hello {first_name}!")
name_of_function("JOR")


Output : Yoo hoo, hello JOR!


def calculate_circumference(radius):
 """
 Calculate the circumference of a circle based on its radius
 """
 return 2 * 3.142 * radius
a = calculate_circumference(5)
print(a)


Output : 31.419999999999998

def calculate_circumference(radius = 1):
 """
 Calculate the circumference of a circle based on its radius
 """
 return 2 * 3.142 * radius
a = calculate_circumference()
print(a)

Output: 6.284



def calculate_circumference(radius):
 """
 Calculate the circumference of a circle based on its radius
 """
 return 2 * 3.142 * radius
# Get a radius value as a string
r = input("Provide a radius value: ")
# Convert it to a float
r_float = float(r)
# Call the function and create the variable for the return value
a = calculate_circumference(r_float)
print(a)4


output : Provide a radius value: 4
25.136



Tuple Unpacking


Changing the penultimate line to
product, price, availability = most_expensive(price_list)



def most_expensive(price_list):
 """
 Iterate through a list and find the most expensive item
 """
 # Set up the variables
 max_price = 0
 max_price_item = ""
 # Iterate, unpacking the tuple
 for description, price in price_list:
 # If this is the maximum price, record that in our variables
 if price > max_price:
 max_price = price
 max_price_item = description
 # If it is not the maximum price, do nothing
 else:
 pass
 # Return the maximum prices item and its price
 return max_price_item, max_price
# Provide the data
price_list = [("Pineapple", 1.0), ("Apples", .5), ("Pears", .7), ("Peaches", .8)]
# Call the function and unpack its return values
product, price, availability = most_expensive(price_list)
print(product, price)


Output: 
 if price > max_price:
    ^
IndentationError: expected an indented block after 'for' statement on line 9



Using_map_and_lambda_functions



def double_number(n: int)->int:
 """
 Simple function to double a number
 """
 return n+n
# Create a list of numbers for testing
my_numbers = [1,2,3,4,5]
# Map my_numbers to the double_number function, return type is map
result = map(double_number, my_numbers)
# Print a list of the map
print(list(result))
# Or iterate through it
for item in map(double_number, my_numbers):
 print(item)


output :

[2, 4, 6, 8, 10]
2
4
6
8
10



circumference = lambda radius : 2 * 3.142 * radius
area = lambda radius : 3.142 * radius * radius
radius = 5
print(circumference(radius), area(radius))

Output: 31.419999999999998 78.55


Scope


my_string = "global"
def my_function():
 my_string = "enclosing"
 def nested_function():
 my_string = "local"
 print(my_string)
 nested_function()
 return my_string
# Print the variable my_string
print(my_string)
# Print the output of the function, my_function
print(my_function())


Output

   my_string = "local"
    ^
IndentationError: expected an indented block after function definition on line 4


my_string = "global"
def my_function():
 global my_string
 print(f"At the moment, my_string is: {my_string}")
 my_string = "mangled!"
my_function()
print(f"Now the global value of my_string is: {my_string}")


Output : At the moment, my_string is: global
Now the global value of my_string is: mangled!



Exercise



def divisible(numerator: int, denominator: int)->boolean:
 return numerator % denominator == 0
print(divisible(30,4))

Output :  def divisible(numerator: int, denominator: int)->boolean:
NameError: name 'boolean' is not defined

Explanation:  boolean was not defined 


def find_num(number_list: list, number: int)->boolean:
 for iterate_number in number_list:
 if iterate_number == number:
 return True
 else:
 pass
result = find_num([1,2,3,4,5,6,7,8], 9)
print(result)


if iterate_number == number:
    ^
IndentationError: expected an indented block after 'for' statement on line 2


