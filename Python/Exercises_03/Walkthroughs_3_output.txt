Lists

my_list = [1,2,3,4,"A"]
a = len (my_list)
print(a)
slice_1 = my_list[1:3:1]
print(slice_1)
my_character = my_list[-1]
print(my_character)

o:\Python\Exercises_03>python List1.py
5
[2, 3]
A


concatenate lists


my_list_1 = [1,2,3,4,"A"]
my_list_2 = ["S","T","Fish",9,10]
concatentated_list = my_list_1 + my_list_2
print(concatentated_list)

o:\Python\Exercises_03>python List1.py
[1, 2, 3, 4, 'A', 'S', 'T', 'Fish', 9, 10]


Nested List

my_list_1 = [1,2,3,4,"A"]
my_list_2 = ["S","T","Fish",9,10]
concatentated_list = [my_list_1, my_list_2]
print(concatentated_list)

o:\Python\Exercises_03>python List1.py
[[1, 2, 3, 4, 'A'], ['S', 'T', 'Fish', 9, 10]]


my_list_1 = ["S","T","Fish",9,10]
print (my_list_1)
my_list_1[2] = "Chips"
print(my_list_1)

o:\Python\Exercises_03>python List1.py
['S', 'T', 'Fish', 9, 10]
['S', 'T', 'Chips', 9, 10]


Appending Items.

my_list = ["One","Two","Three"]
print (my_list)
my_list.append("Four")
print(my_list)

o:\Python\Exercises_03>python List1.py
['One', 'Two', 'Three']
['One', 'Two', 'Three', 'Four']



Tuples

my_list = ["One","Two","Three"]
my_tuple = ("one", "two", "three")
print(type(my_list))
print(type(my_tuple))

o:\Python\Exercises_03>python List1.py
<class 'list'>
<class 'tuple'>


my_tuple = ("One","Two","Three", "One")
# How many times does "One" appear in the tuple
print(my_tuple.count("One"))
# At what position in the tuple can I first find "One"
print(my_tuple.index("One"))

o:\Python\Exercises_03>python List1.py
2
0

Below Tried changing a value from "One" to "Two" in the tuple using its index and verify it is immutable.

my_tuple = ("One","Two","Three", "One")
# How many times does "One" appear in the tuple
print(my_tuple.count("One"))
# At what position in the tuple can I first find "One"
print(my_tuple.index("Two"))

o:\Python\Exercises_03>python List1.py
2
1


Dictionaries

my_dictionary = {"FName":"Glen", "SName":"Godinho", "Occupation":"Technical Support Enginner"}
print(my_dictionary)
print("Works as a " + my_dictionary["Occupation"])

o:\Python\Exercises_03>python Dict1.py
{'FName': 'Glen', 'SName': 'Godinho', 'Occupation': 'Technical Support Enginner'}
Works as a Technical Support Enginner


my_dictionary = {"FName":"Glen", "SName":"Godinho", "Occupation":"Technical Support Enginner"}
print(my_dictionary)
my_dictionary["Salary"] = "Not Enough!"
print(my_dictionary)

o:\Python\Exercises_03>python Dict1.py
{'FName': 'Glen', 'SName': 'Godinho', 'Occupation': 'Technical Support Enginner'}
{'FName': 'Glen', 'SName': 'Godinho', 'Occupation': 'Technical Support Enginner', 'Salary': 'Not Enough!'}


 Added comments to break up the code

# Create the intial dictionary
my_dictionary = {"FName":"Glen", "SName":"Godinho", "Occupation":"Technical Support Enginner"}
print(my_dictionary)
# Add a key:value pair
my_dictionary["Salary"] = "Not Enough!"
print(my_dictionary)
# Edit one ValueError
my_dictionary["Occupation"] = "Chef!"
print(my_dictionary)

o:\Python\Exercises_03>python Dict1.py
{'FName': 'Glen', 'SName': 'Godinho', 'Occupation': 'Technical Support Enginner'}
{'FName': 'Glen', 'SName': 'Godinho', 'Occupation': 'Technical Support Enginner', 'Salary': 'Not Enough!'}
{'FName': 'Glen', 'SName': 'Godinho', 'Occupation': 'Chef!', 'Salary': 'Not Enough!'}


Sets

my_set = set()
print(type(my_set))
print(my_set)
my_set.add(1)
my_set.add(2)
my_set.add(3)
print(my_set)

o:\Python\Exercises_03>python Set1.py
<class 'set'>
set()
{1, 2, 3}





